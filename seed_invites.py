# seed_invites.py
from __future__ import annotations
import os
import random
from supabase import create_client
from itertools import product

SUPABASE_URL = os.environ.get("SUPABASE_URL")
SUPABASE_SERVICE_KEY = os.environ.get("SUPABASE_SERVICE_KEY")
if not SUPABASE_URL or not SUPABASE_SERVICE_KEY:
    raise SystemExit("Set SUPABASE_URL and SUPABASE_SERVICE_KEY env vars.")

sb = create_client(SUPABASE_URL, SUPABASE_SERVICE_KEY)

# ---------- –ë–ê–ó–ê: –∏–≥—Ä—ã, –Ω–∞–∑–≤–∞–Ω–∏—è –∏ —ç–º–æ–¥–∑–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞ ----------
GAMES = {
    "codenames": {"title": "Codenames", "emoji": "üß†"},
    "bunker":    {"title": "–ë—É–Ω–∫–µ—Ä",    "emoji": "üèöÔ∏è"},
    "alias":     {"title": "Alias",     "emoji": "üó£Ô∏è"},
    "gartic":    {"title": "Gartic",    "emoji": "üé®"},
    "mafia":     {"title": "Mafia",     "emoji": "üïµÔ∏è"},
    "doors":     {"title": "Doors (–∑–∞—Ö–≤–∞—Ç—ã –∏ –∑–∞—â–∏—Ç–∞)", "emoji": "üö™"},
}

# ---------- –ì–ï–ù–ï–†–ê–¶–ò–Ø –§–†–ê–ó: 100 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –Ω–∞ –∏–≥—Ä—É ----------
# –ü—Ä–∞–≤–∏–ª–∞:
# - –∫–æ—Ä–æ—Ç–∫–æ, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –±–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π (—É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª—è–µ—Ç bot)
# - –≤ –∫–æ–Ω—Ü–µ –∏–Ω–æ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –º–∏–Ω–∏-–∏–∫–æ–Ω–∫–∏ —Ç–µ–º–ø–∞/–≤—Ä–µ–º–µ–Ω–∏
TAILS = ["", " ‚Äî –ø–æ–µ—Ö–∞–ª–∏!", " ‚Äî 10 –º–∏–Ω—É—Ç –∏ —Å—Ç–∞—Ä—Ç!", " ‚Äî –∑–∞–ª–µ—Ç–∞–µ–º!", " ‚Äî –±–µ–∑ —Ä–∞–∑–æ–≥—Ä–µ–≤–∞!", " ‚Äî –±—ã—Å—Ç—Ä–æ-–±—ã—Å—Ç—Ä–æ!"]
CLOCKS = ["‚è±Ô∏è", "‚è≥", "üïí", "‚ö°", "üî•", "üéØ", "‚≠ê", "‚úÖ"]

def mix(patterns, emojis, extras=None, need=100):
    extras = extras or [""]
    pool = []
    for p, e, t in product(patterns, emojis, extras):
        s = p.replace("{e}", e)
        if t:
            s = f"{s} {t}"
        pool.append(s.strip())
    random.shuffle(pool)
    # —É–Ω–∏–∫–∞–ª–∏–∑—É–µ–º –∏ –Ω–∞—Ä–µ–∂–µ–º –¥–æ need
    uniq = []
    seen = set()
    for s in pool:
        if s not in seen:
            seen.add(s)
            uniq.append(s)
        if len(uniq) >= need:
            break
    # –µ—Å–ª–∏ –≤—Å—ë –∂–µ < need ‚Äî –¥–æ–±—å—ë–º –≤–∞—Ä–∏–∞—Ü–∏—è–º–∏ —Å —Ö–≤–æ—Å—Ç–∞–º–∏/—á–∞—Å–∏–∫–∞–º–∏
    i = 0
    while len(uniq) < need:
        base = patterns[i % len(patterns)].replace("{e}", emojis[i % len(emojis)])
        tail = random.choice(TAILS)
        clock = random.choice(CLOCKS)
        candidate = f"{base} {clock} {tail}".strip()
        if candidate not in seen:
            seen.add(candidate)
            uniq.append(candidate)
        i += 1
    return uniq[:need]

# --- –ù–∞–±–æ—Ä—ã —Ñ—Ä–∞–∑ –ø–æ –∏–≥—Ä–∞–º (—à–∞–±–ª–æ–Ω—ã –∏ —ç–º–æ–¥–∑–∏) ---
PATTERNS = {
    "codenames": {
        "patterns": [
            "{e} –ì–æ—Ç–æ–≤ —Å—ã–≥—Ä–∞—Ç—å –≤ Codenames?",
            "{e} –ü–æ–≥–Ω–∞–ª–∏ –≤ Codenames!",
            "{e} –ö–æ–º–∞–Ω–¥–∞–º –Ω—É–∂–Ω—ã –±–æ–π—Ü—ã!",
            "{e} Codenames –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!",
            "{e} –ö–æ–¥—ã –∂–¥—É—Ç ‚Äî –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—à—å—Å—è?",
            "{e} –ë—ã—Å—Ç—Ä—ã–π —Ä–∞—É–Ω–¥ –≤ Codenames!",
            "{e} –°–∏–Ω–∏–µ –∏–ª–∏ –∫—Ä–∞—Å–Ω—ã–µ ‚Äî –∫—É–¥–∞ —Ç—ã?",
            "{e} –ó–∞–≥–ª—è–¥—ã–≤–∞–π –≤ –∫–æ–º–Ω–∞—Ç—É ‚Äî –∏–¥—ë–º!",
        ],
        "emojis": ["üß†","üü•","üü¶","üóùÔ∏è","üó∫Ô∏è","üïµÔ∏è","üéØ","‚ö°"],
    },
    "bunker": {
        "patterns": [
            "{e} –°—Ä–æ—á–Ω—ã–π —Å–±–æ—Ä –≤ –ë—É–Ω–∫–µ—Ä!",
            "{e} –í –ë—É–Ω–∫–µ—Ä ‚Äî –≤—ã–∂–∏–≤–∞—Ç—å –±—É–¥–µ–º?",
            "{e} –°–æ–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—É –≤ –ë—É–Ω–∫–µ—Ä!",
            "{e} –ö –¥–≤–µ—Ä–∏ –ë—É–Ω–∫–µ—Ä–∞ ‚Äî –≤—ã—Ö–æ–¥–∏!",
            "{e} –ë–µ–∑ —Ç–µ–±—è –ª—é–∫ –Ω–µ –∑–∞–∫—Ä–æ–µ—Ç—Å—è!",
            "{e} –ë—Ä–∏—Ñ–∏–Ω–≥ —É –≤—Ö–æ–¥–∞ ‚Äî –ø–æ–¥–æ–π–¥—ë—à—å?",
            "{e} –ü–µ—Ä–µ–∂–¥—ë–º –≤–º–µ—Å—Ç–µ? –í –ë—É–Ω–∫–µ—Ä!",
            "{e} –≠–∫—Å–ø—Ä–µ—Å—Å-—Ä–∞—É–Ω–¥ –≤ –ë—É–Ω–∫–µ—Ä!",
        ],
        "emojis": ["üèöÔ∏è","üõ°Ô∏è","üî¶","üß≠","üß∞","ü™ñ","üö®","ü•´"],
    },
    "alias": {
        "patterns": [
            "{e} –ü–æ—è—Å–Ω–∏-–∫–∞! –ò–¥—ë–º –≤ Alias?",
            "{e} Alias —Å–µ–π—á–∞—Å ‚Äî –ø–æ–¥–∫–ª—é—á–∞–π—Å—è!",
            "{e} –û—Ç–≥–∞–¥—ã–≤–∞–µ–º —Å–ª–æ–≤–∞ ‚Äî –≤ –¥–µ–ª–æ!",
            "{e} –ü–æ–≥–Ω–∞–ª–∏ —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å –Ω–∞–º—ë–∫–∞–º–∏!",
            "{e} –†–∞—É–Ω–¥ Alias –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å!",
            "{e} –ì–æ—Ç–æ–≤(–∞) –æ–±—ä—è—Å–Ω—è—Ç—å –±–µ–∑ —Å–ª–æ–≤?",
            "{e} –ü–æ—Ç—Ä–µ–Ω–∏–º –Ω–∞—Ö–æ–¥—á–∏–≤–æ—Å—Ç—å?",
            "{e} –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ Alias!",
        ],
        "emojis": ["üó£Ô∏è","üí¨","üß©","üéâ","‚ö°","üéØ","üì£","ü§π"],
    },
    "gartic": {
        "patterns": [
            "{e} –í Gartic! –†–∏—Å—É–µ–º –∏ —É–≥–∞–¥—ã–≤–∞–µ–º!",
            "{e} –ë—ã—Å—Ç—Ä—ã–π —Å–∫–µ—Ç—á-–±–∞—Ç—Ç–ª?",
            "{e} –ö–∏—Å—Ç–∏ –∑–∞—Ä—è–∂–µ–Ω—ã ‚Äî –∑–∞—Ö–æ–¥–∏!",
            "{e} –ù–∞—Ä–∏—Å—É–µ—à—å –Ω–∞–º –ø–æ–±–µ–¥—É?",
            "{e} –í—Ä–µ–º—è –∫–∞—Ä–∞–∫—É–ª—å! –í Gartic!",
            "{e} –ü–∏–∫—Å–µ–ª–∏ –∂–¥—É—Ç ‚Äî –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è!",
            "{e} –£–≥–∞–¥–∞–µ—à—å –ø–æ —Ç—Ä—ë–º –ª–∏–Ω–∏—è–º?",
            "{e} –†–∏—Å—É–µ–º –º–≥–Ω–æ–≤–µ–Ω–Ω–æ ‚Äî –ª–µ—Ç—Å –≥–æ—É!",
        ],
        "emojis": ["üé®","‚úèÔ∏è","üñåÔ∏è","üß†","‚ö°","üñºÔ∏è","‚ú®","üèÜ"],
    },
    "mafia": {
        "patterns": [
            "{e} –ù–æ—á—å –±–ª–∏–∑–∫–æ ‚Äî –≤ Mafia!",
            "{e} –ì–æ—Ä–æ–¥ —É—Å–Ω—É–ª, –∏–≥—Ä–∞–µ–º?",
            "{e} –ö—Ä—É–≥–ª—ã–π —Å—Ç–æ–ª –∂–¥—ë—Ç ‚Äî –ø—Ä–∏—Å–∞–∂–∏–≤–∞–π—Å—è!",
            "{e} –ú–∏—Ä–Ω—ã–µ/–º–∞—Ñ–∏—è ‚Äî –ø—Ä–æ–≤–µ—Ä–∏–º —É–¥–∞—á—É?",
            "{e} –°—Ä–æ—á–Ω—ã–π —Å–æ–∑—ã–≤ –Ω–∞ Mafia!",
            "{e} –î–µ—Ç–µ–∫—Ç–∏–≤—ã –≤ –¥–µ–ª–µ, –∑–∞–π–¥—ë—à—å?",
            "{e} –£–ª–∏–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ ‚Äî –∏–¥—ë–º –∏–≥—Ä–∞—Ç—å!",
            "{e} –ë—ã—Å—Ç—Ä—ã–π —Å–µ—Ç –≤ Mafia!",
        ],
        "emojis": ["üïµÔ∏è","üåô","üß©","üîç","üó≥Ô∏è","üíº","üéØ","ü´¢"],
    },
    "doors": {
        "patterns": [
            "{e} Doors: –∑–∞—Ö–≤–∞—Ç—ã –∏ –∑–∞—â–∏—Ç–∞ ‚Äî –≤ –±–æ–π?",
            "{e} –ù–∞ —Ä—É–±–µ–∂! Doors –∂–¥—ë—Ç!",
            "{e} –°–æ–±–∏—Ä–∞–µ–º —à—Ç—É—Ä–º ‚Äî –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—à—å—Å—è?",
            "{e} –î–µ—Ä–∂–∏–º –æ–±–æ—Ä–æ–Ω—É? –ó–∞–ª–µ—Ç–∞–π!",
            "{e} –ë—ã—Å—Ç—Ä—ã–π –º–∞—Ç—á Doors!",
            "{e} –®—Ç—É—Ä–º –Ω–∞—á–∞–ª—Å—è ‚Äî —Ç—ã —Å –Ω–∞–º–∏?",
            "{e} –ù—É–∂–Ω–∞ —Ç–≤–æ—è —Ä–µ–∞–∫—Ü–∏—è ‚Äî Doors!",
            "{e} –ó–∞—â–∏—Ç–∞ –≥–æ—Ç–æ–≤—ã? –ü–æ–≥–Ω–∞–ª–∏!",
        ],
        "emojis": ["üö™","üõ°Ô∏è","‚öîÔ∏è","üèÅ","‚ö°","üéØ","üî•","üèÜ"],
    },
}

def build_invites_for(game_key: str) -> list[str]:
    pack = PATTERNS[game_key]
    return mix(pack["patterns"], pack["emojis"], extras=[*TAILS, *CLOCKS], need=100)

def upsert_preset(game_key: str, title: str, emoji: str, invite_lines: list[str]):
    sb.table("gt_game_presets").upsert({
        "game_key": game_key,
        "title": title,
        "emoji": emoji,
        "invite_lines": invite_lines,
        "is_active": True,
    }).execute()

def main():
    for key, meta in GAMES.items():
        invites = build_invites_for(key)
        upsert_preset(key, meta["title"], meta["emoji"], invites)
        print(f"Upserted {key}: {len(invites)} lines")

if __name__ == "__main__":
    main()
