from __future__ import annotations

import html
import re
from typing import Optional, List

from aiogram import Bot
from aiogram.types import Message, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder

# –£—Å—Ç–æ–π—á–∏–≤—ã–µ –∏–º–ø–æ—Ä—Ç—ã (–∫–æ—Ä–µ–Ω—å –∏–ª–∏ –ø–æ–¥–ø–∞–ø–∫–∏)
try:
    from supabase_repo import SupabaseRepo, Preset
except ModuleNotFoundError:
    from repo.supabase_repo import SupabaseRepo, Preset

try:
    import texts
except ModuleNotFoundError:
    from handlers import texts


# ---------- Markdown -> HTML (–∂–∏—Ä–Ω—ã–π) ----------
def _md_to_html(text: str) -> str:
    """
    –õ—ë–≥–∫–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è markdown-**–∂–∏—Ä–Ω–æ–≥–æ** –≤ HTML <b>‚Ä¶</b>, –æ—Å—Ç–∞–ª—å–Ω–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º.
    """
    placeholder_open = "\u0001"
    placeholder_close = "\u0002"

    def mark_bold(m: re.Match) -> str:
        inner = m.group(1)
        return f"{placeholder_open}{inner}{placeholder_close}"

    marked = re.sub(r"\*\*(.+?)\*\*", mark_bold, text)
    escaped = html.escape(marked)
    return escaped.replace(placeholder_open, "<b>").replace(placeholder_close, "</b>")


class SessionService:
    def __init__(self, bot: Bot, repo: SupabaseRepo) -> None:
        self.bot = bot
        self.repo = repo

    # ---------- –ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥: —Å–æ–∑–¥–∞—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å ¬´—à–∞–ø–∫—É¬ª ----------
    async def post_or_get_session_message(
        self,
        chat_id: int,
        preset: Preset,
        session: dict,
        show_target_picker: bool = False,
    ) -> int:
        """
        –°–æ–∑–¥–∞—ë—Ç/–æ–±–Ω–æ–≤–ª—è–µ—Ç ¬´—à–∞–ø–∫—É¬ª –Ω–∞–±–æ—Ä–∞ –¥–ª—è —Å–µ—Å—Å–∏–∏.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç message_id.
        """
        text_html = self._build_header_text(preset, session)
        kb = self._build_keyboard(session["session_id"], session["target_count"], show_target_picker)

        msg_id = session.get("message_id")
        if msg_id:
            try:
                await self.bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=msg_id,
                    text=text_html,
                    parse_mode="HTML",
                    reply_markup=kb,
                    disable_web_page_preview=True,
                )
                return msg_id
            except Exception:
                # –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å (—É–¥–∞–ª–∏–ª–∏/–Ω–µ—Ç –ø—Ä–∞–≤) ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ
                pass

        sent = await self.bot.send_message(
            chat_id,
            text_html,
            parse_mode="HTML",
            reply_markup=kb,
            disable_web_page_preview=True,
        )
        self.repo.set_session_message(session["session_id"], sent.message_id)
        return sent.message_id

    # ---------- –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ UI ----------
    def _build_header_text(self, preset: Preset, session: dict) -> str:
        """
        **–ù–∞–∑–≤–∞–Ω–∏–µ** (Markdown -> HTML) +
        —Å—Ç—Ä–æ–∫–∞ ¬´üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ‚Äî N¬ª +
        —Å–≤–æ–¥–∫–∞ RSVP (HTML).
        """
        title_html = _md_to_html(texts.header(preset.title, preset.emoji))
        target = int(session.get("target_count", 10))

        going_ids, maybe_ids, nope_ids = self.repo.get_rsvp_lists(session["session_id"])
        going = [self._mention(uid) for uid in going_ids]
        maybe = [self._mention(uid) for uid in maybe_ids]
        nope = [self._mention(uid) for uid in nope_ids]

        lines: List[str] = [
            title_html,
            f"\nüë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ‚Äî <b>{target}</b>",
            "",
            "<b>–°–≤–æ–¥–∫–∞:</b>",
            f"–ò–¥—É ({len(going)}/{target}): " + (", ".join(going) if going else "‚Äî"),
            f"–ú–æ–∂–µ—Ç –±—ã—Ç—å ({len(maybe)}): " + (", ".join(maybe) if maybe else "‚Äî"),
            f"–ù–µ —Å–µ–≥–æ–¥–Ω—è ({len(nope)}): " + (", ".join(nope) if nope else "‚Äî"),
        ]
        if len(going) >= target:
            lines.append("")
            lines.append(html.escape(texts.FULLY_STAFFED))

        return "\n".join(lines)

    def _build_keyboard(self, session_id: str, target: int, show_picker: bool) -> InlineKeyboardMarkup:
        """
        –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞:
        - —Ä—è–¥ RSVP-–∫–Ω–æ–ø–æ–∫;
        - –∫–Ω–æ–ø–∫–∞ ¬´–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (N)¬ª –ò–õ–ò –±—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä [3,4,5,6,8,10,12] + ¬´–ù–∞–∑–∞–¥¬ª.
        """
        kb = InlineKeyboardBuilder()
        # RSVP
        kb.button(text=texts.BTN_GO, callback_data=f"rsvp:going:{session_id}")
        kb.button(text=texts.BTN_MAYBE, callback_data=f"rsvp:maybe:{session_id}")
        kb.button(text=texts.BTN_NO, callback_data=f"rsvp:no:{session_id}")
        kb.row()

        if show_picker:
            # –ë—ã—Å—Ç—Ä—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
            for n in (3, 4, 5, 6, 8, 10, 12):
                kb.button(text=str(n), callback_data=f"set_target:{session_id}:{n}")
            kb.row()
            kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"target_back:{session_id}")
        else:
            kb.button(text=f"–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ({int(target)})", callback_data=f"change_target:{session_id}")

        return kb.as_markup()

    # ---------- –•–µ–ª–ø–µ—Ä—ã ----------
    def _mention(self, uid: int) -> str:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTML-—É–ø–æ–º–∏–Ω–∞–Ω–∏–µ: <a href="tg://user?id=...">label</a>
        label = @username | –ò–º—è | "–∏–≥—Ä–æ–∫"
        """
        try:
            u = self.repo.get_user_public(uid)
        except Exception:
            u = None

        if u and u.get("username"):
            label = f"@{u['username']}"
        elif u and u.get("first_name"):
            label = u["first_name"]
        else:
            label = "–∏–≥—Ä–æ–∫"

        return f'<a href="tg://user?id={uid}">{html.escape(label)}</a>'
